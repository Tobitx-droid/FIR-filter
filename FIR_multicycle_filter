----------------------------------------------------------------------------------
-- Company: ToBiT's WoRlD
-- Engineer: Tobit Amofa Adu-Bredu
-- 
-- Create Date: 01/25/2023 10:18:02 AM
-- Design Name: 
-- Module Name: coeffFilter - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;


-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity coeffFilter is

----Defining some constant values------------

    Generic(input_bit_length  : integer := 8;
            output_bit_length : integer := 16; 
            coeff_bit_length  : integer := 8; 
            tap               : integer := 11;  ---A tap is simply a coefficient value 
            convResult        : integer := 21
        );
----------------------------------------------

-----------Defining inputs and outputs---------     

    Port (
        in1  : in std_logic_vector(input_bit_length-1 downto 0);
        clk  : in std_logic;
        rst  : in std_logic;
        --jcounter : in std_logic_vector(7 downto 0);
        --pcounter : in std_logic_vector(7 downto 0);
        out1 : out std_logic_vector(output_bit_length-1 downto 0)
     );
end coeffFilter;

architecture Behavioral of coeffFilter is

------Using 8-bit register to store input one at a time----------
    component reg8bits is
        Generic(
        input_bit_length  : integer := 8
        );
        Port (
            REG_IN : in std_logic_vector(input_bit_length-1 downto 0);
            clk,rst : in std_logic;
            REG_OUT: out std_logic_vector(input_bit_length-1 downto 0)
         );
    end component;
    
---------Defining required variables------------------
--Defining a constant array for storing filter coefficients

type coefficient_type is array (1 to tap) of std_logic_vector(coeff_bit_length-1 downto 0);
constant coefficients : coefficient_type := (           
                                             X"F1",
                                             X"F3",
                                             X"07",   --These coefficients make the sinc
                                             X"26",   --function in the time domain
                                             X"42",   --used hexadecimal form for 
                                             X"4E",   --simplicity
                                             X"42",
                                             X"26",
                                             X"07",
                                             X"F3",
                                             X"F1"
                                            );
                                             
 --The convolution involves mainly : 1.Shifting
--                                 : 2.Multiplying
--                                 : 3.Addition

--Three types of variables(arrays) are required                                                                                                                                                                                              
 
 type shift_reg_type is array (0 to 10) of std_logic_vector(input_bit_length-1 downto 0);
 signal shift_register : shift_reg_type;
 
 type mul_reg_type is array (0 to 10) of std_logic_vector(input_bit_length+coeff_bit_length-1 downto 0);
 signal mul_register   : mul_reg_type;
 
-- type add_reg_type is array (0 to tap-1) of std_logic_vector(input_bit_length+coeff_bit_length-1 downto 0);
 --signal add_register    : add_reg_type;
 
 type wait_reg_type is array (0 to 11, 0 to 10) of std_logic_vector(input_bit_length+coeff_bit_length-1 downto 0);
 signal wait_reg : wait_reg_type;
 
 type result_reg_type is array (0 to convResult-1) of std_logic_vector(input_bit_length+coeff_bit_length-1 downto 0);
 signal result_reg    : result_reg_type;
 
signal outCount: integer range 0 to convResult-1;
signal p : integer range 0 to 11 ;
signal j : integer range 0 to 10 ;
--signal g : integer range 0 to tap-1 := 0;
--signal jc : integer ;
--signal pc : integer range 0 to 8;
 --Beginning of the architecture
 --constructing the equation 
    
    
begin
    --jc <= to_integer(unsigned(jcounter));
    --pc <= to_integer(unsigned(pcounter));
   

--Declaring initail values to the registers
shift_register(0) <= in1;
mul_register(0)   <= in1 * coefficients(1);
--test <= in1 * coefficients(1);
--wait_reg(0,0)   <= "0000000000000000";

generating_fir : for i in 0 to 9 generate
                    begin
                        --step 1 : shifting of input signal 
                        
                        eight_bit_reg_unit : reg8bits generic map(
                                                input_bit_length => 8
                                             )
                                             port map(
                                                clk      => clk,
                                                rst      => rst,
                                                REG_IN   => shift_register(I),
                                                REG_OUT  => shift_register(I+1)
                                             );

--STEP 2 : product of filter coefficients and input----
     mul_register(I+1) <= shift_register(I+1) * coefficients(I+2);
             
--STEP 3 : summation of all the elements
   --add_register(I+1) <= add_register(I) + mul_register(0);
   
                      
               end generate;
       --Doing the proper summation to finish the convolution  
   -- process(in1) is
   --     begin
   --         if(rst = '1')then
   --             p <= 0;
   --         else
   --             p <= p + 1;
   --         end if;
   -- end process;
   
  -- process(clk)
  --  begin
  --      --if(ri)then        
    process(rst,mul_register) is
        --variable g : integer := 0;
            begin  
                       
                    
                if(rst = '0')then
                    j <= j + 1;
                    --wait_reg(0,0) <= mul_register(0);               
                    wait_reg(p,j) <= mul_register(j);
                    if(j = 10)then 
                        j <=  0;
                        p <= p + 1;             
                    end if;                                  
                    
                elsif(rst = '1')then
                    for p in 0 to 11 loop
                        for j in 0 to 10 loop
                            wait_reg(p,j) <= "0000000000000000";
                        end loop;    
                    end loop;
                    p <= 0;
                end if;
                             
                
    end process;  
               ---filling the result register with the 
   result_reg(0)  <=  wait_reg(0,0);
   result_reg(1)  <=  wait_reg(0,1)  + wait_reg(1,0);
   result_reg(2)  <=  wait_reg(0,2)  + wait_reg(1,1) + wait_reg(2,0) ;
   result_reg(3)  <=  wait_reg(0,3)  + wait_reg(1,2) + wait_reg(2,1) + wait_reg(3,0);
   result_reg(4)  <=  wait_reg(0,4)  + wait_reg(1,3) + wait_reg(2,2) + wait_reg(3,1) + wait_reg(4,0);
   result_reg(5)  <=  wait_reg(0,5)  + wait_reg(1,4) + wait_reg(2,3) + wait_reg(3,2) + wait_reg(4,1) + wait_reg(5,0);
   result_reg(6)  <=  wait_reg(0,6)  + wait_reg(1,5) + wait_reg(2,4) + wait_reg(3,3) + wait_reg(4,2) + wait_reg(5,1) + wait_reg(6,0);
   result_reg(7)  <=  wait_reg(0,7)  + wait_reg(1,6) + wait_reg(2,5) + wait_reg(3,4) + wait_reg(4,3) + wait_reg(5,2) + wait_reg(6,1) + wait_reg(7,0);
   result_reg(8)  <=  wait_reg(0,8)  + wait_reg(1,7) + wait_reg(2,6) + wait_reg(3,5) + wait_reg(4,4) + wait_reg(5,3) + wait_reg(6,2) + wait_reg(7,1) + wait_reg(8,0);
   result_reg(9)  <=  wait_reg(0,9)  + wait_reg(1,8) + wait_reg(2,7) + wait_reg(3,6) + wait_reg(4,5) + wait_reg(5,4) + wait_reg(6,3) + wait_reg(7,2) + wait_reg(8,1) + wait_reg(9,0);
   result_reg(10) <=  wait_reg(0,10) + wait_reg(1,9) + wait_reg(2,8) + wait_reg(3,7) + wait_reg(4,6) + wait_reg(5,5) + wait_reg(6,4) + wait_reg(7,3) + wait_reg(8,2) + wait_reg(9,1) + wait_reg(10,0);
   result_reg(11) <=  wait_reg(1,10) + wait_reg(2,9) + wait_reg(3,8) + wait_reg(4,7) + wait_reg(5,6) + wait_reg(6,5) + wait_reg(7,4) + wait_reg(8,3) + wait_reg(9,2) +wait_reg(10,1);
   result_reg(12) <=  wait_reg(2,10) + wait_reg(3,9) + wait_reg(4,8) + wait_reg(5,7) + wait_reg(6,6) + wait_reg(7,5) + wait_reg(8,4) + wait_reg(9,3) + wait_reg(10,2);
   result_reg(13) <=  wait_reg(3,10) + wait_reg(4,9) + wait_reg(5,8) + wait_reg(6,7) + wait_reg(7,6) + wait_reg(8,5) + wait_reg(9,4) + wait_reg(10,3);
   result_reg(14) <=  wait_reg(4,10) + wait_reg(5,9) + wait_reg(6,8) + wait_reg(7,7) + wait_reg(8,6) + wait_reg(9,5) + wait_reg(10,4);
   result_reg(15) <=  wait_reg(5,10) + wait_reg(6,9) + wait_reg(7,8) + wait_reg(8,7) + wait_reg(9,6) + wait_reg(10,5);
   result_reg(16) <=  wait_reg(6,10) + wait_reg(7,9) + wait_reg(8,8) + wait_reg(9,7) + wait_reg(10,6);
   result_reg(17) <=  wait_reg(7,10) + wait_reg(8,9) + wait_reg(9,8) + wait_reg(10,7);
   result_reg(18) <=  wait_reg(8,10) + wait_reg(9,9) + wait_reg(10,8);
   result_reg(19) <=  wait_reg(9,10) + wait_reg(10,9);
   result_reg(20) <=  wait_reg(10,10);
           
 ----Outputting the filter results-----------------------                
    dataOut: process(clk) is
                begin
                   if(rst = '0')then     
                        
                        if(outCount = 21)then
                            outCount <= 0;
                        else
                          outCount <= outCount + 1;
                          out1 <= result_reg(outCount);
                        end if;
                   else
                    out1 <= (others => '0');
                    outCount <= 0;
                   end if;
             end process;
                                    
--STEP 4 : Assigning final result to output port

--out1  <=  add_register(tap-1);
           

end Behavioral;
